# Написать метод count_find_num, который принимает на вход список простых множителей (primesL) и целое число,
# предел (limit), после чего попробуйте сгенерировать по порядку все числа.
# Меньшие значения предела, которые имеют все и только простые множители простых чисел primesL.
#
# primesL = [2, 5, 7]
# limit = 500
# List of Numbers Under 500          Prime Factorization
# ___________________________________________________________
#            70                         [2, 5, 7]
#           140                         [2, 2, 5, 7]
#           280                         [2, 2, 2, 5, 7]
#           350                         [2, 5, 5, 7]
#           490                         [2, 5, 7, 7]
#
# Скопировать
# 5 из этих чисел меньше 500, а самое большое из них 490.

import itertools


def count_find_num(primesL, limit):
    output = []
    factors = {}
    temp_factors = []
    primesL = set(sorted(primesL, reverse=True))
    for i in primesL:
        lim = int(limit)
        min_factor = int(i)
        for j in primesL:
            if not j == i:
                lim = int(lim) / int(j)
        while int(min_factor) <= int(lim):
            temp_factors.append(min_factor)
            min_factor *= int(i)
        factors[i] = temp_factors
        temp_factors = []
    for i in factors:
        max_power = len(factors[i])
        for j in factors:
            if len(factors[j]) > max_power:
                max_power = len(factors[j])
        if max_power == len(factors[i]):
            break
    combos = list(itertools.product(*factors.values()))
    sums = set()
    for i in range(len(combos)):
        product = 0
        for j in range(len(combos[i])):
            if product == 0:
                product = combos[i][j]
            else:
                product *= combos[i][j]
        if product <= limit:
            sums.add(product)
    try:
        max_value = max(sums)
    except:
        max_value = 0
    if max_value:
        output.append(len(sums))
        output.append(max_value)
        return output
    else:
        return []

primesL = list(map(int, input().split()))
limit = int(input())
print(count_find_num(primesL, limit))
